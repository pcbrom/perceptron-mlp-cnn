model_logistic <- glm(
Outcome ~ Glucose_c + BMI_c + Age_c + Pregnancies,
data = db_full_2,
family = binomial(link = "logit")
)
anova(model_logistic)
model_logistic <- glm(
Outcome ~ Glucose_c + BMI_c + Age_c,
data = db_full_2,
family = binomial(link = "logit")
)
anova(model_logistic)
summary(model_logistic)
# R2 de McFadden
r2(model_logistic)
model_logistic <- glm(
Outcome ~ Glucose_c + BMI_c + Age_c - 1,
data = db_full_2,
family = binomial(link = "logit")
)
anova(model_logistic)
summary(model_logistic)
# R2 de McFadden
r2(model_logistic)
model_logistic <- glm(
Outcome ~ Age_c - 1,
data = db_full_2,
family = binomial(link = "logit")
)
anova(model_logistic)
summary(model_logistic)
# R2 de McFadden
r2(model_logistic)
db_full_2 <- db_full |>
mutate(
logGlucose = log(Glucose + 1),
logBMI = log(BMI + 1),
logAge = log(Age + 1),
Age_c = cut(Age, breaks = quantile(Age, probs = seq(0, 1, 0.25)), include.lowest = TRUE)
)
model_logistic <- glm(
Outcome ~ (logGlucose + logBMI + Age_c + Pregnancies)^2,
data = db_full_2,
family = binomial(link = "logit")
)
anova(model_logistic)
model_logistic <- glm(
Outcome ~ logGlucose + logBMI + Age_c,
data = db_full_2,
family = binomial(link = "logit")
)
anova(model_logistic)
summary(model_logistic)
# R2 de McFadden
r2(model_logistic)
# Modelo explicativo - Regressão Logística - Modelo naive
model_logistic <- glm(
Outcome ~ (Glucose + BMI + Age + Pregnancies)^2,
data = db_full,
family = binomial(link = "logit")
)
# Modelo explicativo - Regressão Logística - Modelo naive
model_logistic <- glm(
Outcome ~ (Glucose + BMI + Age + Pregnancies)^2,
data = db_full,
family = binomial(link = "logit")
)
anova(model_logistic)
model_logistic <- glm(
Outcome ~ Glucose + BMI + Age,
data = db_full,
family = binomial(link = "logit")
)
anova(model_logistic)
summary(model_logistic)
# R2 de McFadden
r2 <- function(model) 1 - (model$deviance / model$null.deviance)
r2(model_logistic)
# Modelo explicativo - Regressão Logística - Modelo transformação de dados
db_full_2 <- db_full |>
mutate(
logGlucose = log(Glucose + 1),
logBMI = log(BMI + 1),
logAge = log(Age + 1),
Age_c = cut(Age, breaks = quantile(Age, probs = seq(0, 1, 0.25)), include.lowest = TRUE)
)
model_logistic <- glm(
Outcome ~ (logGlucose + logBMI + Age_c + Pregnancies)^2,
data = db_full_2,
family = binomial(link = "logit")
)
anova(model_logistic)
model_logistic <- glm(
Outcome ~ logGlucose + logBMI + Age_c,
data = db_full_2,
family = binomial(link = "logit")
)
anova(model_logistic)
summary(model_logistic)
# R2 de McFadden
r2(model_logistic)
# Modelo explicativo - Regressão Logística - Modelo transformação de dados
db_full_2 <- db_full |>
mutate(
logGlucose = log(Glucose + 1),
logBMI = log(BMI + 1),
logAge = log(Age + 1)
)
model_logistic <- glm(
Outcome ~ (logGlucose + logBMI + Age_c + Pregnancies)^2,
data = db_full_2,
family = binomial(link = "logit")
)
anova(model_logistic)
model_logistic <- glm(
Outcome ~ (logGlucose + logBMI + logAge + Pregnancies)^2,
data = db_full_2,
family = binomial(link = "logit")
)
anova(model_logistic)
model_logistic <- glm(
Outcome ~ logGlucose + logBMI + logAge,
data = db_full_2,
family = binomial(link = "logit")
)
anova(model_logistic)
summary(model_logistic)
# R2 de McFadden
r2(model_logistic)
# Regressão Logística - Abordagem Estatística ---------------------------------
# Modelo explicativo - Regressão Logística - Modelo sem transformação de dados
# Pregnancies não significativa
# Efeito de interação não significativo
model_logistic <- glm(
Outcome ~ Glucose + BMI + Age,
data = db_full,
family = binomial(link = "logit")
)
anova(model_logistic)
summary(model_logistic)
# R2 de McFadden
r2 <- function(model) 1 - (model$deviance / model$null.deviance)
r2(model_logistic)
# Modelo explicativo - Regressão Logística - Modelo transformação de dados
# Pregnancies não significativa
# Efeito de interação não significativo
db_full_2 <- db_full |>
mutate(
logGlucose = log(Glucose + 1),
logBMI = log(BMI + 1),
logAge = log(Age + 1)
)
model_logistic <- glm(
Outcome ~ logGlucose + logBMI + logAge,
data = db_full_2,
family = binomial(link = "logit")
)
anova(model_logistic)
summary(model_logistic)
# R2 de McFadden
r2(model_logistic)
anova(model_logistic_A, test = "Chisq")
# Modelo explicativo - Regressão Logística - Modelo sem transformação de dados
# Pregnancies não significativa
# Efeito de interação não significativo
model_logistic_A <- glm(
Outcome ~ Glucose + BMI + Age,
data = db_full,
family = binomial(link = "logit")
)
anova(model_logistic_A, test = "Chisq")
# Modelo explicativo - Regressão Logística - Modelo transformação de dados
# Pregnancies não significativa
# Efeito de interação não significativo
db_full_2 <- db_full |>
mutate(
logGlucose = log(Glucose + 1),
logBMI = log(BMI + 1),
logAge = log(Age + 1)
)
model_logistic_B <- glm(
Outcome ~ logGlucose + logBMI + logAge,
data = db_full_2,
family = binomial(link = "logit")
)
anova(model_logistic_B, test = "Chisq")
summary(model_logistic_B)
# R2 de McFadden
r2(model_logistic_B)
# Anova
anova(model_logistic_A, model_logistic_B, test = "Chisq")
# Regressão Logística - Abordagem Estatística ---------------------------------
# Função para calcular R2 de McFadden
r2 <- function(model) 1 - (model$deviance / model$null.deviance)
# Modelo explicativo - Regressão Logística - Modelo sem transformação de dados
# Pregnancies não significativa
# Efeito de interação não significativo
model_logistic_A <- glm(
Outcome ~ Glucose + BMI + Age,
data = db_full,
family = binomial(link = "logit")
)
anova(model_logistic_A, test = "Chisq")
summary(model_logistic_A)
# R2 de McFadden
r2(model_logistic_A)
# Modelo explicativo - Regressão Logística - Modelo transformação de dados
# Pregnancies não significativa
# Efeito de interação não significativo
db_full_2 <- db_full |>
mutate(
logGlucose = log(Glucose + 1),
logBMI = log(BMI + 1),
logAge = log(Age + 1)
)
model_logistic_B <- glm(
Outcome ~ logGlucose + logBMI + logAge,
data = db_full_2,
family = binomial(link = "logit")
)
anova(model_logistic_B, test = "Chisq")
summary(model_logistic_B)
# R2 de McFadden
r2(model_logistic_B)
# Anova
anova(model_logistic_A, model_logistic_B, test = "Chisq")
library(stats)
# 1. Obtain original logits and probabilities
logit_orig <- predict(model_logistic_A, newdata = db_full, type = "link")
prob_orig  <- plogis(logit_orig)
prob_orig
# 2. Fit calibration model (intercept + slope)
cal_model <- glm(Outcome ~ logit_orig, family = binomial, data = data_set)
gamma0 <- coef(cal_model)[1]  # intercept
gamma1 <- coef(cal_model)[2]  # slope
# 3. Generate recalibrated probabilities
prob_recal <- plogis(gamma0 + gamma1 * logit_orig)
# 2. Fit calibration model (intercept + slope)
cal_model <- glm(Outcome ~ logit_orig, family = binomial, data = data_set)
# 2. Fit calibration model (intercept + slope)
cal_model <- glm(Outcome ~ logit_orig, family = binomial, data = db_full)
gamma0 <- coef(cal_model)[1]  # intercept
gamma1 <- coef(cal_model)[2]  # slope
# 3. Generate recalibrated probabilities
prob_recal <- plogis(gamma0 + gamma1 * logit_orig)
# 4. Optional: assess new calibration
library(ResourceSelection)
hoslem.test(x = db_full$Outcome, y = prob_recal)
hoslem.test(x = as.numeric(db_full$Outcome), y = prob_recal)
library(rms)
dd <- datadist(db_full); options(datadist = "dd")
fit_rcs <- lrm(Outcome ~ rcs(Glucose, 4) + rcs(BMI, 4) + Age, data = db_full)
# Curva de calibração via bootstrap 200 réplicas
cal <- calibrate(fit_rcs, method = "boot", B = 200)
cal
# Curva de calibração via bootstrap 200 réplicas
cal <- calibrate(fit_rcs,
method = "boot",
B = 200,
data = db_full,
u = 0.5)
library(rms)
# 1. Configuração do datadist (necessário para rms)
dd <- datadist(db_full)
dd
options(datadist = "dd")
# 2. Ajuste do modelo com splines cúbicas restritas
fit_rcs <- lrm(
Outcome ~ rcs(Glucose, 4) + rcs(BMI, 4) + Age,
data = db_full,
x = TRUE,   # armazena matriz de preditores
y = TRUE    # armazena vetor resposta
)
# 3. Calibração interna via bootstrap (B = 200)
cal <- calibrate(
fit_rcs,
method = "boot",
B = 200       # número de réplicas
)
# 4. Gráfico de calibração
plot(
cal,
xlab = "Probabilidade prevista",
ylab = "Probabilidade observada"
)
fit_rcs
# 4. Optional: assess new calibration
hoslem.test(x = as.numeric(db_full$Outcome), y = prob_recal)
# Calibração interna via bootstrap (B = 1000)
cal <- calibrate(fit_rcs, method = "boot", B = 1000)
# Gráfico de calibração
plot(
cal,
xlab = "Probabilidade prevista",
ylab = "Probabilidade observada"
)
plot(
cal,
xlab = "Probabilidade prevista",
ylab = "Probabilidade observada",
main = "Curva de calibração do modelo preditivo",
)
png("figures/calibration_plot.png", width = 800, height = 600)
plot(
cal,
xlab = "Probabilidade prevista",
ylab = "Probabilidade observada",
main = "Curva de calibração do modelo preditivo",
)
dev.off()
png("figures/calibration_plot.png", width = 400, height = 300)
plot(
cal,
xlab = "Probabilidade prevista",
ylab = "Probabilidade observada",
main = "Curva de calibração do modelo preditivo",
)
dev.off()
png("figures/calibration_plot.png", width = 800, height = 600, res = 100))
png("figures/calibration_plot.png", width = 800, height = 600, res = 100)
plot(
cal,
xlab = "Probabilidade prevista",
ylab = "Probabilidade observada",
main = "Curva de calibração do modelo preditivo",
)
dev.off()
png("figures/calibration_plot.png", width = 800, height = 600, res = 150)
plot(
cal,
xlab = "Probabilidade prevista",
ylab = "Probabilidade observada",
main = "Curva de calibração do modelo preditivo",
)
dev.off()
png("figures/calibration_plot.png", width = 800, height = 800, res = 150)
plot(
cal,
xlab = "Probabilidade prevista",
ylab = "Probabilidade observada",
main = "Curva de calibração do modelo preditivo",
)
dev.off()
anova(fit_rcs)
summary(fit_rcs)
r2(fit_rcs)
# Avaliação do modelo preditiva
get_metrics <- function(model, data) {
pred_logistic <- predict(model, newdata = data, type = "response")
pred_logistic_class <- ifelse(pred_logistic > 0.5, 1, 0) |> as.factor()
confusionMatrix(pred_logistic_class, data$Outcome)
}
get_metrics(fit_rcs, db_train)
predict(fit_rcs, newdata = data)
predict.glm(fit_rcs, newdata = db_train, type = "response") |>
as.numeric() |>
hist(xlab = "Probabilidade prevista", main = "Histograma de probabilidades previstas")
# logistic linear
prob_lin  <- predict(model_logistic_A, newdata = db_novo, type = "response")
# logistic linear recalibrado
logit_lin <- predict(model_logistic_A, newdata = db_novo, type = "link")
# logistic linear
prob_lin  <- predict(model_logistic_A, newdata = db_train, type = "response")
# Regressão Logística - Abordagem Estatística ---------------------------------
# Função para calcular R2 de McFadden
r2 <- function(model) 1 - (model$deviance / model$null.deviance)
# Modelo explicativo - Regressão Logística
# Pregnancies não significativa
# Efeito de interação não significativo
model_logistic_A <- glm(
Outcome ~ Glucose + BMI + Age,
data = db_full,
family = binomial(link = "logit")
)
anova(model_logistic_A, test = "Chisq")
summary(model_logistic_A)
# R2 de McFadden
r2(model_logistic_A)
# Escolha de modelo sem transformação de dados
# - Treinamento de equipes de enfermagem costuma preferir coeficientes diretos em
#   mg dL⁻¹ e kg m⁻².
# - Políticas de saúde pública utilizam pontos de corte absolutos
#   (≥ 126 mg dL⁻¹ para glicemia em jejum, IMC ≥ 30 kg m⁻²).
# - A recalibração intercepto + inclinação é necessária em ambos; não altera a
#   ordem de preferência.
# Recalibração
# | Aspecto       | Justificativa                                                                                                                                                                                                      | Consequência prática                                                                                                               |
# | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------- |
# | Calibração    | O teste de Hosmer–Lemeshow indicou discordância sistemática entre probabilidades previstas e observadas para os dois modelos lineares. Isso revela viés global (intercepto) e/ou distorção de escala (inclinação). | Ajustar **apenas** intercepto (γ₀) e inclinação (γ₁) sobre o logito original corrige o desvio médio sem reconstruir todo o modelo. |
# | Discriminação | O procedimento não modifica o ranking de risco (AUC permanece idêntica).                                                                                                                                           | O poder de separação dos modelos não muda; portanto o ordenamento “modelo mais explicável” (escala original) continua válido.      |
# | Parcimônia    | Recalibração pós-estime consome 2 g.l., muito menos que acrescentar termos spline em um modelo já preferido.                                                                                                       | Mantém a simplicidade interpretativa e computacional, preservando a escolha do Modelo A.                                           |
# Obter logits e probabilidades
logit_orig <- predict(model_logistic_A, newdata = db_full, type = "link")
prob_orig  <- plogis(logit_orig)
# Calibração do modelo (intercept + slope)
cal_model <- glm(Outcome ~ logit_orig, family = binomial, data = db_full)
# Obter coeficientes de calibração
gamma0 <- coef(cal_model)[1]  # intercept
gamma1 <- coef(cal_model)[2]  # slope
# Gerar probabilidades calibradas
prob_recal <- plogis(gamma0 + gamma1 * logit_orig)
# Configuração do datadist (necessário para rms)
dd <- datadist(db_full)
options(datadist = "dd")
# Ajuste do modelo com splines cúbicas restritas
fit_rcs <- lrm(
Outcome ~ rcs(Glucose, 4) + rcs(BMI, 4) + Age,
data = db_full,
x = TRUE,   # armazena matriz de preditores
y = TRUE    # armazena vetor resposta
)
# Calibração interna via bootstrap (B = 1000)
cal <- calibrate(fit_rcs, method = "boot", B = 1000)
# Gráfico de calibração
png("figures/calibration_plot.png", width = 800, height = 800, res = 150)
plot(
cal,
xlab = "Probabilidade prevista",
ylab = "Probabilidade observada",
main = "Curva de calibração do modelo preditivo",
)
dev.off()
# Avaliação do modelo
anova(fit_rcs)
summary(fit_rcs)
# Função para pegar métricas
get_metrics <- function(model, data) {
pred_logistic <- predict(model, newdata = data, type = "response")
pred_logistic_class <- ifelse(pred_logistic > 0.5, 1, 0) |> as.factor()
confusionMatrix(pred_logistic_class, data$Outcome)
ROSE::roc.curve(data$Outcome, pred_logistic)
}
get_metrics(model_logistic, db_train)
get_metrics(model_logistic_A, db_train)
# Função para pegar métricas
get_metrics <- function(model, data) {
pred_logistic <- predict(model, newdata = data, type = "response")
pred_logistic_class <- ifelse(pred_logistic > 0.5, 1, 0) |> as.factor()
print(confusionMatrix(pred_logistic_class, data$Outcome))
ROSE::roc.curve(data$Outcome, pred_logistic)
}
get_metrics(model_logistic_A, db_train)
get_metrics(model_logistic_A, db_test)
get_metrics(model_logistic_A, db_validation)
# Função para pegar métricas
get_metrics <- function(model, data, tipo) {
pred_logistic <- predict(model, newdata = data, type = "response")
pred_logistic_class <- ifelse(pred_logistic > 0.5, 1, 0) |> as.factor()
print(confusionMatrix(pred_logistic_class, data$Outcome))
roc.curve(data$Outcome, pred_logistic, main = paste0("ROC Curve: ", tipo))
}
get_metrics(model_logistic_A, db_train, "Treino")
get_metrics(model_logistic_A, db_test, "Teste")
get_metrics(model_logistic_A, db_validation, "Validação")
# logistic linear
prob_lin  <- predict(model_logistic_A, newdata = db_novo, type = "response")
# logistic linear recalibrado
logit_lin <- predict(model_logistic_A, newdata = db_novo, type = "link")
# logistic linear
prob_lin  <- predict(model_logistic_A, newdata = db_full, type = "response")
# logistic linear recalibrado
logit_lin <- predict(model_logistic_A, newdata = db_full, type = "link")
prob_cal  <- plogis(gamma0 + gamma1 * logit_lin)
# modelo com splines
prob_rcs  <- predict(fit_rcs, newdata = db_full, type = "fitted")
prob_rcs
# modelo com splines
prob_rcs  <- predict(fit_rcs, newdata = db_full, type = "response")
# modelo com splines
prob_rcs  <- predict(fit_rcs, newdata = db_full, type = "fitted")
prob_rcs
predic_rcs <- ifelse(prob_rcs > 0.5, 1, 0) |> as.factor()
predic_rcs
confusionMatrix(predic_rcs, db_full$Outcome)
roc.curve(db_full$Outcome, prob_rcs, main = "ROC Curve: RCS Model")
# modelo com splines
get_metrics_rcs <- function(model, data, tipo) {
pred_rcs <- predict(model, newdata = data, type = "fitted")
pred_rcs_class <- ifelse(pred_rcs > 0.5, 1, 0) |> as.factor()
print(confusionMatrix(pred_rcs_class, data$Outcome))
roc.curve(data$Outcome, pred_rcs, main = paste0("ROC Curve: ", tipo))
}
get_metrics_rcs(fit_rcs, db_train, "Treino")
get_metrics_rcs(fit_rcs, db_test, "Teste")
get_metrics_rcs(fit_rcs, db_validation, "Validação")
# Qualidade preditiva do modelo A ---------------------------------------------
# Função para pegar métricas
get_metrics <- function(model, data, tipo) {
pred_logistic <- predict(model, newdata = data, type = "response")
pred_logistic_class <- ifelse(pred_logistic > 0.5, 1, 0) |> as.factor()
print(confusionMatrix(pred_logistic_class, data$Outcome))
roc.curve(data$Outcome, pred_logistic, main = paste0("ROC Curve: ", tipo))
}
get_metrics(model_logistic_A, db_train, "Treino")
get_metrics(model_logistic_A, db_test, "Teste")
get_metrics(model_logistic_A, db_validation, "Validação")
# Qualidade preditiva do modelo recalibrado -----------------------------------
# logistic linear
prob_lin  <- predict(model_logistic_A, newdata = db_full, type = "response")
# logistic linear recalibrado
logit_lin <- predict(model_logistic_A, newdata = db_full, type = "link")
prob_cal  <- plogis(gamma0 + gamma1 * logit_lin)
# modelo com splines
get_metrics_rcs <- function(model, data, tipo) {
pred_rcs <- predict(model, newdata = data, type = "fitted")
pred_rcs_class <- ifelse(pred_rcs > 0.5, 1, 0) |> as.factor()
print(confusionMatrix(pred_rcs_class, data$Outcome))
roc.curve(data$Outcome, pred_rcs, main = paste0("ROC Curve: ", tipo))
}
get_metrics_rcs(fit_rcs, db_train, "Treino")
get_metrics_rcs(fit_rcs, db_test, "Teste")
get_metrics_rcs(fit_rcs, db_validation, "Validação")
